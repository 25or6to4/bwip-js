% --BEGIN RENDERER renmatrix--
%% /setpacking where {pop currentpacking true setpacking} if
%% 1 dict
%% begin
/renmatrix {
	% true when running the test framework
	bwipjs_dontdraw { return } if

    20 dict begin

    /args exch def

    % Default options
    /width 1 def
    /height 1 def
    /barcolor (unset) def
    /backgroundcolor (unset) def

    % Apply the renderer options and the user options
    args {def} forall
    opt {def} forall

    /width width cvr def
    /height height cvr def
    /barcolor barcolor cvlit def
    /backgroundcolor backgroundcolor cvlit def

    % Extend bitmap horizontally to an 8-bit boundary
    /pixx8 pixx 8 div ceiling cvi 8 mul def
    /pixs8 [ pixx8 pixy mul {0} repeat ] def
    0 1 pixy 1 sub {
        /i exch def
        pixs8 pixx8 i mul pixs pixx i mul pixx getinterval putinterval
    } for
    /pixs pixs8 def

    % Convert bitmap into 8-bit sample string
    /imgstr pixs length 8 idiv string def
    0 1 pixs length 1 sub {
        /i exch def
        imgstr i 8 idiv 2 copy get 2 7 i 8 mod sub exp cvi pixs i get mul add put
    } for

    % Draw the image
    gsave
    currentpoint translate
    72 width mul 72 height mul scale
    .0001 .0001 moveto .9999 .0001 lineto .9999 .9999 lineto .0001 .9999 lineto closepath
	setextent
    % backgroundcolor (unset) ne { gsave backgroundcolor setcolor fill grestore } if 
    barcolor (unset) ne { barcolor setcolor } if
	%% Original invokation of imagemask
    %% pixx pixy true [ pixx 0 0 pixy neg 0 pixy ] {imgstr} imagemask
	%% Simplified for bwip-js
	%% parameters polarity=true and matrix=null are ignored
    pixx pixy true null imgstr imagemask
    grestore

    end

} bind def
%% /renmatrix dup load /uk.co.terryburton.bwipp defineresource pop
%% end
%% /setpacking where {pop setpacking} if
% --END RENDERER renmatrix--

